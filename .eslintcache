[{"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/cardano-db-client.ts":"1","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/cardano-ledger.ts":"2","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/clients/db-client.ts":"3","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/clients/postgres-client.ts":"4","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/address.ts":"5","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/asset.ts":"6","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/block.ts":"7","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/delegation.ts":"8","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/epoch-paramenters.ts":"9","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/epoch.ts":"10","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/metadata.ts":"11","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/pool-delegation.ts":"12","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/pool.ts":"13","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/stake.ts":"14","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/transaction.ts":"15","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/utxo.ts":"16","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/utils/index.ts":"17","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/utils/migrate.ts":"18"},{"size":1154,"mtime":1633356257434,"results":"19","hashOfConfig":"20"},{"size":1473,"mtime":1640110779241,"results":"21","hashOfConfig":"20"},{"size":1686,"mtime":1641260639176,"results":"22","hashOfConfig":"20"},{"size":25104,"mtime":1641262974481,"results":"23","hashOfConfig":"20"},{"size":46,"mtime":1633356257434,"results":"24","hashOfConfig":"20"},{"size":259,"mtime":1633356257434,"results":"25","hashOfConfig":"20"},{"size":496,"mtime":1640701348634,"results":"26","hashOfConfig":"20"},{"size":261,"mtime":1640294321178,"results":"27","hashOfConfig":"20"},{"size":554,"mtime":1633356257434,"results":"28","hashOfConfig":"20"},{"size":183,"mtime":1639513343613,"results":"29","hashOfConfig":"20"},{"size":57,"mtime":1633356257434,"results":"30","hashOfConfig":"20"},{"size":112,"mtime":1639944979324,"results":"31","hashOfConfig":"20"},{"size":166,"mtime":1639517272969,"results":"32","hashOfConfig":"20"},{"size":242,"mtime":1633356257434,"results":"33","hashOfConfig":"20"},{"size":737,"mtime":1640123128362,"results":"34","hashOfConfig":"20"},{"size":255,"mtime":1641234940741,"results":"35","hashOfConfig":"20"},{"size":946,"mtime":1641262907783,"results":"36","hashOfConfig":"20"},{"size":3028,"mtime":1641263011552,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16hi9et",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/cardano-db-client.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/cardano-ledger.ts",["79","80","81","82","83","84","85","86"],"import EventEmitter = require(\"events\");\nimport { Block } from \"./models/block\";\nimport { DbClient } from \"./clients/db-client\";\nimport { Epoch } from \"./models/epoch\";\nimport { Transaction } from \"./models/transaction\";\nimport { Delegation } from \"./models/delegation\";\n\nexport class CardanoLedger extends EventEmitter {\n\tdbClient: DbClient;\n\tonEpochBound: any;\n\tonBlockBound: any;\n\tonDelegationBound: any;\n\tonTransactionBound: any;\n\n\tconstructor(dbClient: DbClient){\n\t\tsuper();\n\n\t\tthis.dbClient = dbClient;\n\t\tthis.onEpochBound = this.onEpoch.bind(this);\n\t\tthis.onBlockBound = this.onBlock.bind(this);\n\t\tthis.onDelegationBound = this.onDelegation.bind(this);\n\t\tthis.onTransactionBound = this.onTransaction.bind(this);\n\n\t\tthis.dbClient.listenEvent('new_epoch', this.onEpochBound);\n\t\tthis.dbClient.listenEvent('new_block', this.onBlockBound);\n\t\tthis.dbClient.listenEvent('new_delegation', this.onDelegationBound);\n\t\tthis.dbClient.listenEvent('new_transaction', this.onTransactionBound);\n\t}\n\n\tprivate async onEpoch(msg: any) {\n\t\tconst epoch: Epoch = msg.payload.record;\n\t\tthis.emit('epoch', epoch);\n\t}\n\n\tprivate async onBlock(msg: any) {\n\t\tconst block: Block = msg.payload.record;\n\t\tthis.emit('block', block);\n\t}\n\n\tprivate async onDelegation(msg: any) {\n\t\tconst delegation: Delegation = msg.payload.record;\n\t\tthis.emit('delegation', delegation);\n\t}\n\n\tprivate async onTransaction(msg: any) {\n\t\tconst tx: Transaction = msg.payload.record;\n\t\tthis.emit('transaction', tx);\n\t}\n\n\n}","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/clients/db-client.ts",["87","88","89"],"import { Transaction } from \"../models/transaction\";\nimport { Block } from \"../models/block\";\nimport { Utxo } from \"../models/utxo\";\nimport { Stake } from \"../models/stake\";\nimport { Pool } from \"../models/pool\";\nimport { Address } from \"../models/address\";\nimport { Metadata } from \"../models/metadata\";\nimport { EpochParameters } from \"../models/epoch-paramenters\";\nimport { PoolDelegation } from \"../models/pool-delegation\";\n\nexport interface DbClient {\n\treconnect(): void;\n\tdisconnect(): Promise<void>;\n\tisConnected(): boolean;\n\tgetBlock(id: number|string): Promise<Block>;\n\tgetLatestBlock(): Promise<Block>;\n\tgetBlockTransactionsById(block_id: number): Promise<Transaction[]>;\n\tgetBlockTransactions(block_no: number): Promise<Transaction[]>;\n\tgetTransactionUtxos(txHash: string): Promise<{hash: string, outputs: Utxo[], inputs: Utxo[]}>;\n\tgetTransactionMetadata(txHash: string): Promise<Metadata[]>;\n\tgetAddressUtxos(address: string): Promise<Utxo[]>;\n\tgetAddressTransactions(address: string, size: number, blockNumber: number, order: string): Promise<Transaction[]>;\n\tgetStakeUtxos(stakeAddress: string): Promise<Utxo[]>;\n\tgetStake(stakeAddress: string): Promise<Stake>;\n\tgetStakeAddresses(stakeAddress: string): Promise<Address[]>;\n\tgetPool(poolId: string): Promise<Pool>;\n\tgetPoolBySlotLeader(slot_leader: number): Promise<Pool>;\n\tgetDelegations(poolId: string): Promise<PoolDelegation[]>;\n\tgetEpochParamters(epoch: number): Promise<EpochParameters>;\n\tregisterEvent(event: string, args: any, callback: (msg: any) => void): void; // args should expect table_name, operation (INSERT|UPDATE ...) trigger config etc\n\tlistenEvent(event: string, callback: (msg: any) => void): void;\n}","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/clients/postgres-client.ts",["90","91","92","93","94","95","96","97","98","99"],"import { Knex, knex } from 'knex';\nimport { Address } from '../models/address';\nimport { Asset } from '../models/asset';\nimport { Block } from '../models/block';\nimport { Pool } from '../models/pool';\nimport { Stake } from '../models/stake';\nimport { Transaction } from '../models/transaction';\n\nimport { Utxo } from \"../models/utxo\";\nimport { DbClient } from \"./db-client\";\n\nimport Utils from \"../utils\";\nimport { Metadata } from '../models/metadata';\nimport { EpochParameters } from '../models/epoch-paramenters';\nimport { PoolDelegation } from '../models/pool-delegation';\n\nexport class PostgresClient implements DbClient {\n\tknex: Knex;\n\tconfig: Knex.Config;\n\tdestroyed: boolean;\n\n\tconstructor(conf: Knex.Config) {\n\t\tthis.config = {\n\t\t\t...conf,\n\t\t\tclient: 'pg'\n\t\t};\n\t\tthis.destroyed = false;\n\t\tthis.knex = knex(this.config);\n\t}\n\t\n\tisConnected(): boolean{\n\t\treturn !this.destroyed;\n\t}\n\n\treconnect(){\n\t\tthis.knex.initialize(this.config);\n\t}\n\n\tdisconnect(): Promise<void> {\n\t\tthis.destroyed = true;\n\t\treturn this.knex.destroy();\n\t}\n\n\t// TODO: Check this query performance\n\tasync getBlock(id: number|string): Promise<Block> {\n\t\tlet query = this.knex.select(\n\t\t\t'block.id',\n\t\t\tthis.knex.raw(`encode(block.hash, 'hex') as hash`),\n\t\t\t'block.epoch_no',\n\t\t\t'block.slot_no',\n\t\t\t'block.epoch_slot_no',\n\t\t\t'block.block_no',\n\t\t\t'prev_block.block_no as previous_block',\n\t\t\t'next_block.block_no as next_block',\n\t\t\t'pool_hash.view as slot_leader',\n\t\t\t'block.size',\n\t\t\t'block.time',\n\t\t\t'block.tx_count',\n\t\t\t'tx.out_sum',\n\t\t\t'tx.fees',\n\t\t\tthis.knex.raw(`(select block_no from block where block_no is not null order by block_no desc limit 1 ) - block.block_no + 1 as confirmations`),\n\t\t\tthis.knex.raw(`encode(block.op_cert, 'hex') as op_cert`),\n\t\t\t'block.vrf_key',\n\t\t)\n\t\t.from<Block>('block')\n\t\t.leftJoin('slot_leader', 'slot_leader.id', 'block.slot_leader_id')\n\t\t.leftJoin('pool_hash', 'pool_hash.id', 'slot_leader.pool_hash_id')\n\t\t.leftJoin({prev_block: 'block'}, 'prev_block.id', 'block.previous_id')\n\t\t.leftJoin({next_block: 'block'}, 'next_block.previous_id', 'block.id');\n\t\t// .innerJoin('tx', 'tx.block_id', 'block.id');\n\t\tconst numberOrHash = Number(id); \n\t\tif (Number.isNaN(numberOrHash)) {\n\t\t\tquery = query\n\t\t\t.innerJoin(this.knex.select(\n\t\t\t\t\t'block.id as block_id',\n\t\t\t\t\tthis.knex.raw(`SUM(tx.out_sum) as out_sum`),\n\t\t\t\t\tthis.knex.raw(`SUM(tx.fee) as fees`),\n\t\t\t\t)\n\t\t\t\t.from('block')\n\t\t\t\t.leftJoin('tx', 'tx.block_id', 'block.id')\n\t\t\t\t.whereRaw(`block.hash = decode('${id}', 'hex')`)\n\t\t\t\t.groupBy('block.id')\n\t\t\t\t.as('tx'), pg => pg.on('tx.block_id', 'block.id')\n\t\t\t)\n\t\t} else {\n\t\t\tquery = query\n\t\t\t.innerJoin(this.knex.select(\n\t\t\t\t\t'block.id as block_id',\n\t\t\t\t\tthis.knex.raw(`SUM(tx.out_sum) as out_sum`),\n\t\t\t\t\tthis.knex.raw(`SUM(tx.fee) as fees`),\n\t\t\t\t)\n\t\t\t\t.from('block')\n\t\t\t\t.leftJoin('tx', 'tx.block_id', 'block.id')\n\t\t\t\t.where('block.id', '=', id)\n\t\t\t\t.groupBy('block.id')\n\t\t\t\t.as('tx'), pg => pg.on('tx.block_id', 'block.id')\n\t\t\t)\n\t\t}\n\t\treturn query.then(rows => rows[0]);\n\t}\n\n\tasync getLatestBlock(): Promise<Block> {\n\t\treturn this.knex.select(\n\t\t\t'block.id',\n\t\t\tthis.knex.raw(`encode(block.hash, 'hex') as hash`),\n\t\t\t'block.epoch_no',\n\t\t\t'block.slot_no',\n\t\t\t'block.epoch_slot_no',\n\t\t\t'block.block_no',\n\t\t\t'prev_block.block_no as previous_block',\n\t\t\t'pool_hash.view as slot_leader',\n\t\t\t'block.size',\n\t\t\t'block.time',\n\t\t\t'block.tx_count',\n\t\t\t'tx.out_sum',\n\t\t\t'tx.fees',\n\t\t\tthis.knex.raw(`encode(block.op_cert, 'hex') as op_cert`),\n\t\t\t'block.vrf_key',\n\t\t)\n\t\t.from<Block>('block')\n\t\t.leftJoin('slot_leader', 'slot_leader.id', 'block.slot_leader_id')\n\t\t.leftJoin('pool_hash', 'pool_hash.id', 'slot_leader.pool_hash_id')\n\t\t.leftJoin({prev_block: 'block'}, 'prev_block.id', 'block.previous_id')\n\t\t.innerJoin(this.knex.select(\n\t\t\t\t'block.block_no',\n\t\t\t\tthis.knex.raw(`SUM(tx.out_sum) as out_sum`),\n\t\t\t\tthis.knex.raw(`SUM(tx.fee) as fees`),\n\t\t\t)\n\t\t\t.from('block')\n\t\t\t.leftJoin('tx', 'tx.block_id', 'block.id')\n\t\t\t.whereRaw('block.block_no is not null')\n\t\t\t.groupBy('block.block_no')\n\t\t\t.orderBy('block.block_no', 'desc')\n\t\t\t.limit(1)\n\t\t\t.as('tx'), pg => pg.on('tx.block_no', 'block.block_no')\n\t\t)\n\t\t.then(rows => ({...rows[0], confirmations: 1}))\n\t}\n\n\tasync getBlockTransactionsById(block_id: number): Promise<Transaction[]> {\n\t\treturn this.knex.select(\n\t\t\t'tx.id',\n\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`),\n\t\t\t'tx.block_id',\n\t\t\t'tx.block_index',\n\t\t\t'tx.out_sum',\n\t\t\t'tx.fee',\n\t\t\t'tx.deposit',\n\t\t\t'tx.size',\n\t\t\t'tx.invalid_before',\n\t\t\t'tx.invalid_hereafter',\n\t\t\t'tx.valid_contract',\n\t\t\t'tx.script_size'\n\t\t)\n\t\t.from<Transaction>('tx')\n\t\t.where('tx.block_id', '=', block_id);\n\t}\n\n\tasync getBlockTransactions(block_no: number): Promise<Transaction[]> {\n\t\treturn this.knex.with('b',\n\t\t\tthis.knex.select('id')\n\t\t\t.from('block')\n\t\t\t.where('block.block_no', '=', block_no)\n\t\t)\n\t\t.select(\n\t\t\t'tx.id',\n\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`),\n\t\t\t'tx.block_id',\n\t\t\t'tx.block_index',\n\t\t\t'tx.out_sum',\n\t\t\t'tx.fee',\n\t\t\t'tx.deposit',\n\t\t\t'tx.size',\n\t\t\t'tx.invalid_before',\n\t\t\t'tx.invalid_hereafter',\n\t\t\t'tx.valid_contract',\n\t\t\t'tx.script_size'\n\t\t)\n\t\t.from<Transaction>('tx')\n\t\t.innerJoin('b', 'tx.block_id', 'b.id');\n\t}\n\n\tasync getTransaction(txHash: string): Promise<Transaction> {\n\t\treturn this.knex.select(\n\t\t\t'tx.id',\n\t\t\t'tx.block_id',\n\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`),\n\t\t\t'tx.block_index',\n\t\t\t'tx.out_sum',\n\t\t\t'tx.fee',\n\t\t\t'tx.deposit',\n\t\t\t'tx.size',\n\t\t\t'tx.invalid_before',\n\t\t\t'tx.invalid_hereafter',\n\t\t\t'tx.valid_contract',\n\t\t\t'tx.script_size',\n\t\t\tthis.knex.raw(`(select count(*) from (select tx.id from tx_out where tx_out.tx_id = tx.id union all (select tx.id from tx_in where tx_in.tx_in_id = tx.id)) tx_count) as utxo_count`),\n\t\t\tthis.knex.raw(`(select count(*) from withdrawal where withdrawal.tx_id = tx.id) as withdrawal_count`),\n\t\t\tthis.knex.raw(`(select count(*) from delegation where delegation.tx_id = tx.id) as delegation_count`),\n\t\t\tthis.knex.raw(`(select count(*) from stake_registration where stake_registration.tx_id = tx.id) as stake_cert_count`),\n\t\t\tthis.knex.raw(`exists (select 1 from pool_update where pool_update.registered_tx_id = tx.id) as pool_update`),\n\t\t\tthis.knex.raw(`exists (select 1 from pool_retire where pool_retire.announced_tx_id = tx.id) as pool_retire`),\n\t\t\tthis.knex.raw(`(select count(*) from ma_tx_mint where ma_tx_mint.tx_id = tx.id) as asset_mint_or_burn_count`),\n\t\t\tthis.knex.raw(`encode(block.hash, 'hex') as block_hash`),\n\t\t\t'block.epoch_no as block_epoch_no',\n\t\t\t'block.block_no as block_block_no',\n\t\t\t'block.slot_no as block_slot_no',\n\t\t\t'asset.quantity',\n\t\t\t'asset.policy_id',\n\t\t\t'asset.asset_name',\n\t\t\t'asset.fingerprint',\n\t\t)\n\t\t.from<Transaction>('tx')\n\t\t.innerJoin('block', 'block.id', 'tx.block_id')\n\t\t.innerJoin(\n\t\t\tthis.knex.select(\n\t\t\t\t\t'tx.id as tx_id', \n\t\t\t\t\tthis.knex.raw(`SUM(mto.quantity) as quantity`),\n\t\t\t\t\tthis.knex.raw(`encode(asset.policy, 'hex') as policy_id`),\n\t\t\t\t\tthis.knex.raw(`encode(asset.name, 'hex') as asset_name`),\n\t\t\t\t\t'asset.fingerprint'\n\t\t\t\t)\n\t\t\t\t.from({utxo: 'tx_out'})\n\t\t\t\t.innerJoin('tx', 'tx.id', 'utxo.tx_id')\n\t\t\t\t.leftJoin({mto: 'ma_tx_out'}, 'mto.tx_out_id', 'utxo.id')\n\t\t\t\t.leftJoin({asset: 'multi_asset'}, 'asset.id', 'mto.ident')\n\t\t\t\t.whereRaw(`tx.hash = decode('${txHash}', 'hex')`)\n\t\t\t\t.groupBy('tx.id', 'asset.policy', 'asset.name', 'asset.fingerprint')\n\t\t\t\t.as('asset'), pg => pg.on('asset.tx_id', 'tx.id')\n\t\t)\n\t\t.then(rows => {\n\t\t\tconst assets: Asset[] = rows.map(r => ({\n\t\t\t\tquantity: r.quantity, \n\t\t\t\tpolicy_id: r.policy_id, \n\t\t\t\tasset_name: Utils.convert(r.asset_name),\n\t\t\t\tfingerprint: r.fingerprint\n\t\t\t})).filter(a => a.policy_id);\n\t\t\tconst tx: Transaction = rows.length > 0 ? {\n\t\t\t\tid: rows[0].id,\n\t\t\t\thash: rows[0].hash,\n\t\t\t\tblock_id: rows[0].block_id,\n\t\t\t\tblock_index: rows[0].block_index,\n\t\t\t\tout_sum: rows[0].out_sum,\n\t\t\t\tfee: rows[0].fee,\n\t\t\t\tdeposit: rows[0].deposit,\n\t\t\t\tsize: rows[0].size,\n\t\t\t\tinvalid_before: rows[0].invalid_before,\n\t\t\t\tinvalid_hereafter: rows[0].invalid_hereafter,\n\t\t\t\tvalid_contract: rows[0].valid_contract,\n\t\t\t\tscript_size: rows[0].script_size,\n\t\t\t\tutxo_count: rows[0].utxo_count,\n\t\t\t\twithdrawal_count: rows[0].withdrawal_count,\n\t\t\t\tdelegation_count: rows[0].delegation_count,\n\t\t\t\tstake_cert_count: rows[0].stake_cert_count,\n\t\t\t\tpool_update: rows[0].pool_update,\n\t\t\t\tpool_retire: rows[0].pool_retire,\n\t\t\t\tasset_mint_or_burn_count: rows[0].asset_mint_or_burn_count,\n\t\t\t\tblock: { \n\t\t\t\t\thash: rows[0].block_hash,\n\t\t\t\t\tepoch_no: rows[0].block_epoch_no, \n\t\t\t\t\tblock_no: rows[0].block_block_no,\n\t\t\t\t\tslot_no: rows[0].block_slot_no\n\t\t\t\t},\n\t\t\t\tassets: assets\n\t\t\t} : null;\n\t\t\treturn tx;\n\t\t});\n\t}\n\n\tasync getTransactionUtxos(txHash: string): Promise<{hash: string, outputs: Utxo[], inputs: Utxo[]}> {\n\t\treturn this.knex.select(\n\t\t\t'utxo.address',\n\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`),\n\t\t\t'utxo.index',\n\t\t\t'utxo.value',\n\t\t\tthis.knex.raw('utxo.address_has_script as smart_contract'),\n\t\t\t'mto.quantity',\n\t\t\t'asset.fingerprint',\n\t\t\tthis.knex.raw(`encode(asset.policy, 'hex') as policy_id`),\n\t\t\tthis.knex.raw(`encode(asset.name, 'hex') as asset_name`)\n\t\t)\n\t\t.from<Utxo>({utxo: 'tx_out'})\n\t\t.innerJoin('tx', 'tx.id', 'utxo.tx_id')\n\t\t.leftJoin({mto: 'ma_tx_out'}, 'mto.tx_out_id', 'utxo.id')\n\t\t.leftJoin({asset: 'multi_asset'}, 'asset.id', 'mto.ident')\n\t\t.whereRaw(`tx.hash = decode('${txHash}', 'hex')`)\n\t\t.union(pg => pg.select(\n\t\t\t\t'tx_out.address',\n\t\t\t\t'tx_out.hash',\n\t\t\t\t'tx_out.index',\n\t\t\t\t'tx_out.value',\n\t\t\t\tthis.knex.raw('tx_out.address_has_script as smart_contract'),\n\t\t\t\t'mto.quantity',\n\t\t\t\t'asset.fingerprint',\n\t\t\t\tthis.knex.raw(`encode(asset.policy, 'hex') as policy_id`),\n\t\t\t\tthis.knex.raw(`encode(asset.name, 'hex') as asset_name`)\n\t\t\t)\n\t\t\t.from<Utxo>('tx_in')\n\t\t\t.innerJoin(this.knex.select(\n\t\t\t\t'tx_out.*', \n\t\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`)\n\t\t\t\t)\n\t\t\t\t.from('tx_out')\n\t\t\t\t.innerJoin('tx', 'tx.id', 'tx_out.tx_id')\n\t\t\t\t.as('tx_out'), pg => pg.on('tx_out.tx_id', 'tx_in.tx_out_id').andOn('tx_out.index', 'tx_in.tx_out_index')\n\t\t\t)\n\t\t\t.innerJoin('tx', 'tx.id', 'tx_in.tx_in_id')\n\t\t\t.leftJoin({mto: 'ma_tx_out'}, 'mto.tx_out_id', 'tx_out.id')\n\t\t\t.leftJoin({asset: 'multi_asset'}, 'asset.id', 'mto.ident')\n\t\t\t.whereRaw(`tx.hash = decode('${txHash}', 'hex')`)\n\t\t)\n\t\t.then(rows => {\n\t\t\tconst inputs: Utxo[] = [];\n\t\t\tconst outputs: Utxo[] = [];\n\t\t\trows.forEach((utxo: Utxo) => {\n\t\t\t\tif (utxo.hash != txHash) {\n\t\t\t\t\tinputs.push(utxo);\n\t\t\t\t} else {\n\t\t\t\t\toutputs.push(utxo);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn { hash: txHash, inputs: Utils.groupUtxoAssets(inputs), outputs: Utils.groupUtxoAssets(outputs)};\n\t\t});\n\t}\n\n\tasync getTransactionInputUtxos(txHash: string): Promise<Utxo[]> {\n\t\treturn this.knex.select(\n\t\t\t'tx_out.address',\n\t\t\t'tx_out.hash',\n\t\t\t'tx_out.index',\n\t\t\t'tx_out.value',\n\t\t\tthis.knex.raw('tx_out.address_has_script as smart_contract'),\n\t\t\t'mto.quantity',\n\t\t\tthis.knex.raw(`encode(asset.policy, 'hex') as policy_id`),\n\t\t\tthis.knex.raw(`encode(asset.name, 'hex') as asset_name`),\n\t\t\t'asset.fingerprint'\n\t\t)\n\t\t.from<Utxo>('tx_in')\n\t\t.innerJoin(this.knex.select(\n\t\t\t'tx_out.*', \n\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`)\n\t\t\t)\n\t\t\t.from('tx_out')\n\t\t\t.innerJoin('tx', 'tx.id', 'tx_out.tx_id')\n\t\t\t.as('tx_out'), pg => pg.on('tx_out.tx_id', 'tx_in.tx_out_id').andOn('tx_out.index', 'tx_in.tx_out_index')\n\t\t)\n\t\t.innerJoin('tx', 'tx.id', 'tx_in.tx_in_id')\n\t\t.leftJoin({mto: 'ma_tx_out'}, 'mto.tx_out_id', 'tx_out.id')\n\t\t.leftJoin({asset: 'multi_asset'}, 'asset.id', 'mto.ident')\n\t\t.whereRaw(`tx.hash = decode('${txHash}', 'hex')`)\n\t\t.then(rows => Utils.groupUtxoAssets(rows));\n\t}\n\n\tasync getTransactionMetadata(txHash: string): Promise<Metadata[]> {\n\t\treturn this.knex.select(\n\t\t\t'tx_metadata.key as label',\n\t\t\t'tx_metadata.json',\n\t\t)\n\t\t.from<Metadata>('tx_metadata')\n\t\t.innerJoin('tx', 'tx.id', 'tx_metadata.tx_id')\n\t\t.whereRaw(`tx.hash = decode('${txHash}', 'hex')`)\n\t}\n\n\tasync getAddressUtxos(address: string): Promise<Utxo[]> {\n\t\treturn this.knex.select(\n\t\t\t'address',\n\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`),\n\t\t\t'utxo_view.index',\n\t\t\t'utxo_view.value',\n\t\t\tthis.knex.raw('utxo_view.address_has_script as smart_contract'),\n\t\t\t'mto.quantity',\n\t\t\tthis.knex.raw(`encode(asset.policy, 'hex') as policy_id`),\n\t\t\tthis.knex.raw(`encode(asset.name, 'hex') as asset_name`),\n\t\t\t'asset.fingerprint'\n\t\t)\n\t\t.from<Utxo>('utxo_view')\n\t\t.innerJoin('stake_address', 'stake_address.id', 'utxo_view.stake_address_id')\n\t\t.innerJoin('tx', 'tx.id', 'utxo_view.tx_id')\n\t\t.leftJoin({mto: 'ma_tx_out'}, 'mto.tx_out_id', 'utxo_view.id')\n\t\t.leftJoin({asset: 'multi_asset'}, 'asset.id', 'mto.ident')\n\t\t.where('utxo_view.address', '=', address)\n\t\t.then(rows => Utils.groupUtxoAssets(rows));\n\t}\n\n\tasync getAddressTransactions(address: string, size = 50, blockNumber = -1, order = 'desc'): Promise<Transaction[]> {\n\t\tlet query = this.knex.select(\n\t\t\t'tx.block_index',\n\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`),\t\n\t\t\t'block.block_no',\n\t\t)\n\t\t.from<Transaction>('tx')\n\t\t.innerJoin('block', 'block.id', 'tx.block_id')\n\t\t.innerJoin('tx_out', 'tx_out.tx_id', 'tx.id')\n\t\t.where('tx_out.address', '=', address)\n\t\t.union(pg => pg.select(\n\t\t\t'tx.block_index',\n\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`),\n\t\t\t'block.block_no',\n\t\t)\n\t\t.from<Transaction>('tx')\n\t\t.innerJoin('tx_in', 'tx_in.tx_in_id', 'tx.id')\n\t\t.innerJoin('tx_out', 'tx_out.tx_id', 'tx_in.tx_out_id')\n\t\t.innerJoin('block', 'block.id', 'tx.block_id')\n\t\t.whereRaw('tx_in.tx_out_index = tx_out.index')\n\t\t.andWhere('tx_out.address', '=', address));\n\t\tif (blockNumber >= 0) {\n\t\t\tconst operator = order == 'desc' ? '<' : '>';\n\t\t\tquery = this.knex.select('q.*')\n\t\t\t.from({q: query as any})\n\t\t\t.where('q.block_no', operator, blockNumber)\n\t\t\t.orderBy('q.block_no', order)\n\n\t\t} else {\n\t\t\tquery = query\n\t\t\t.orderBy('block_no', order)\n\t\t}\n\t\treturn query.limit(size).then((rows: any) => rows);\n\t}\n\n\tasync getStakeUtxos(stakeAddress: string): Promise<Utxo[]> {\n\t\treturn this.knex.select(\n\t\t\t'address',\n\t\t\tthis.knex.raw(`encode(tx.hash, 'hex') as hash`),\n\t\t\t'utxo_view.index',\n\t\t\t'utxo_view.value',\n\t\t\tthis.knex.raw('utxo_view.address_has_script as smart_contract'),\n\t\t\t'mto.quantity',\n\t\t\tthis.knex.raw(`encode(asset.policy, 'hex') as policy_id`),\n\t\t\tthis.knex.raw(`encode(asset.name, 'hex') as asset_name`),\n\t\t\t'asset.fingerprint'\n\t\t)\n\t\t.from<Utxo>('utxo_view')\n\t\t.innerJoin('stake_address', 'stake_address.id', 'utxo_view.stake_address_id')\n\t\t.innerJoin('tx', 'tx.id', 'utxo_view.tx_id')\n\t\t.leftJoin({mto: 'ma_tx_out'}, 'mto.tx_out_id', 'utxo_view.id')\n\t\t.leftJoin({asset: 'multi_asset'}, 'asset.id', 'mto.ident')\n\t\t.where('stake_address.view', '=', stakeAddress)\n\t\t.then(rows => rows.map(r => ({ ...r, asset_name: Utils.convert(r.asset_name)})));\n\t}\n\n\tasync getStake(stakeAddress: string): Promise<Stake> {\n\t\treturn this.knex.select(\n\t\t\tthis.knex.raw('stake_active(sd.id, delegation.tx_id) as active'),\n\t\t\t'block.epoch_no as active_epoch',\n\t\t\tthis.knex.raw('COALESCE(utxo_view.controlled_total_stake, 0) + COALESCE(reward.rewards_sum, 0) - COALESCE(wd.withdrawals_sum, 0)  as controlled_total_stake'),\n\t\t\tthis.knex.raw('COALESCE(reward.rewards_sum, 0) as rewards_sum'),\n\t\t\tthis.knex.raw('COALESCE(wd.withdrawals_sum, 0) as withdrawals_sum'),\n\t\t\tthis.knex.raw('COALESCE(reserve.reserves_sum, 0) as reserves_sum'),\n\t\t\tthis.knex.raw('COALESCE(treasury.treasury_sum, 0) as treasury_sum'),\n\t\t\tthis.knex.raw('COALESCE(reward.rewards_sum, 0) - COALESCE(wd.withdrawals_sum, 0) as withdraw_available'),\n\t\t\tthis.knex.raw(`(select \"pool_hash\".\"view\" from stake_address as sa inner join delegation del on del.addr_id = sa.id inner join pool_hash on pool_hash.id = del.pool_hash_id where \"sa\".\"view\" = '${stakeAddress}' order by del.active_epoch_no desc limit 1) as pool_id`),\n\t\t)\n\t\t.from<Stake>({sa: 'stake_address'})\n\t\t.leftJoin(this.knex.select(\n\t\t\t\t'utxo_view.stake_address_id', \n\t\t\t\tthis.knex.raw(`SUM(utxo_view.value) as controlled_total_stake`)\n\t\t\t)\n\t\t\t.from('utxo_view')\n\t\t\t.innerJoin({sa: 'stake_address'}, 'sa.id', 'utxo_view.stake_address_id')\n\t\t\t.where('sa.view', '=', stakeAddress)\n\t\t\t.groupBy('utxo_view.stake_address_id')\n\t\t\t.as('utxo_view'), pg => pg.on('utxo_view.stake_address_id', 'sa.id')\n\t\t)\n\t\t.leftJoin(this.knex.select(\n\t\t\t\t'reward.addr_id', \n\t\t\t\tthis.knex.raw(`SUM(reward.amount) as rewards_sum`)\n\t\t\t)\n\t\t\t.from('reward')\n\t\t\t.innerJoin({sa: 'stake_address'}, 'sa.id', 'reward.addr_id')\n\t\t\t.where('sa.view', '=', stakeAddress)\n\t\t\t.groupBy('reward.addr_id')\n\t\t\t.as('reward'), pg => pg.on('reward.addr_id', 'sa.id')\n\t\t)\n\t\t.leftJoin(this.knex.select(\n\t\t\t\t'withdrawal.addr_id', \n\t\t\t\tthis.knex.raw(`SUM(withdrawal.amount) as withdrawals_sum`)\n\t\t\t)\n\t\t\t.from('withdrawal')\n\t\t\t.innerJoin({sa: 'stake_address'}, 'sa.id', 'withdrawal.addr_id')\n\t\t\t.where('sa.view', '=', stakeAddress)\n\t\t\t.groupBy('withdrawal.addr_id')\n\t\t\t.as('wd'), pg => pg.on('wd.addr_id', 'sa.id')\n\t\t)\n\t\t.leftJoin(this.knex.select(\n\t\t\t\t'reserve.addr_id', \n\t\t\t\tthis.knex.raw(`SUM(reserve.amount) as reserves_sum`)\n\t\t\t)\n\t\t\t.from('reserve')\n\t\t\t.innerJoin({sa: 'stake_address'}, 'sa.id', 'reserve.addr_id')\n\t\t\t.where('sa.view', '=', stakeAddress)\n\t\t\t.groupBy('reserve.addr_id')\n\t\t\t.as('reserve'), pg => pg.on('reserve.addr_id', 'sa.id')\n\t\t)\n\t\t.leftJoin(this.knex.select(\n\t\t\t\t'treasury.addr_id', \n\t\t\t\tthis.knex.raw(`SUM(treasury.amount) as treasury_sum`)\n\t\t\t)\n\t\t\t.from('treasury')\n\t\t\t.innerJoin({sa: 'stake_address'}, 'sa.id', 'treasury.addr_id')\n\t\t\t.where('sa.view', '=', stakeAddress)\n\t\t\t.groupBy('treasury.addr_id')\n\t\t\t.as('treasury'), pg => pg.on('treasury.addr_id', 'sa.id')\n\t\t)\n\t\t.leftJoin('delegation', 'delegation.addr_id', 'sa.id')\n\t\t.leftJoin('tx', 'tx.id', 'delegation.tx_id')\n\t\t.leftJoin('block', 'block.id', 'tx.block_id')\n\t\t.leftJoin({sd: 'stake_deregistration'}, 'sd.addr_id', 'sa.id')\n\t\t.where('sa.view', '=', stakeAddress)\n\t\t.limit(1)\n\t\t.then(rows => rows[0]);\n\t}\n\n\tasync getStakeAddresses(stakeAddress: string): Promise<Address[]> {\n\t\treturn this.knex.select(\n\t\t\t'tx_out.address',\n\t\t)\n\t\t.from<Address>('tx_out')\n\t\t.innerJoin({sa: 'stake_address'}, 'tx_out.stake_address_id', 'sa.id')\n\t\t.where('sa.view', '=', stakeAddress)\n\t\t.groupBy('tx_out.address');\n\t}\n\t\n\tasync getPool(poolId: string | number): Promise<Pool> {\n\t\tlet query = this.knex.select(\n\t\t\t'pool_hash.view as pool_id',\n\t\t\tthis.knex.raw(`encode(pool_hash.hash_raw, 'hex') as raw_id`),\n\t\t\t'pmd.url',\n\t\t\tthis.knex.raw(`encode(pmd.hash, 'hex') as hash`),\n\t\t\tthis.knex.raw('pod.json as data'),\n\t\t)\n\t\t.from<Pool>('pool_hash')\n\t\t.leftJoin({pmd: 'pool_metadata_ref'}, 'pmd.pool_id', 'pool_hash.id')\n\t\t.leftJoin({pod: 'pool_offline_data'}, 'pod.pool_id', 'pool_hash.id');\n\t\tif (!Number.isNaN(Number(poolId))) {\n\t\t\tquery = query \n\t\t\t.where('pool_hash.id', '=', poolId);\n\t\t} else {\n\t\t\tquery = query \n\t\t\t.where('pool_hash.view', '=', poolId);\n\t\t}\n\t\treturn query.then(rows => {\n\t\t\tif (rows.length == 0) return null;\n\t\t\tconst { data, ...cols } = rows[0];\n\t\t\treturn { ...cols, ...data};\n\t\t});\n\t}\n\n\tasync getPoolBySlotLeader(slot_leader_id: number): Promise<Pool> {\n\t\tconst query = this.knex.select(\n\t\t\t'pool_hash.view as pool_id',\n\t\t\tthis.knex.raw(`encode(pool_hash.hash_raw, 'hex') as raw_id`),\n\t\t\t'pmd.url',\n\t\t\tthis.knex.raw(`encode(pmd.hash, 'hex') as hash`),\n\t\t\tthis.knex.raw('pod.json as data'),\n\t\t)\n\t\t.from<Pool>('pool_hash')\n\t\t.innerJoin({sl: 'slot_leader'}, 'sl.pool_hash_id', 'pool_hash.id')\n\t\t.leftJoin({pmd: 'pool_metadata_ref'}, 'pmd.pool_id', 'pool_hash.id')\n\t\t.leftJoin({pod: 'pool_offline_data'}, 'pod.pool_id', 'pool_hash.id')\n\t\t.where('sl.id', '=', slot_leader_id);\n\t\treturn query.then(rows => {\n\t\t\tif (rows.length == 0) return null;\n\t\t\tconst { data, ...cols } = rows[0];\n\t\t\treturn { ...cols, ...data};\n\t\t});\n\t}\n\t\n\tasync getDelegations(poolId: string): Promise<PoolDelegation[]> {\n\t\treturn this.knex.with('delegations', \n\t\t\tthis.knex.select(\n\t\t\t\t'd.addr_id',\n\t\t\t\t'd.tx_id',\n\t\t\t\t'd.pool_hash_id',\n\t\t\t\t'd.active_epoch_no',\n\t\t\t)\n\t\t\t.from({p: 'pool_hash'})\n\t\t\t.innerJoin(this.knex.select(\n\t\t\t\t\tthis.knex.raw('distinct on (d.addr_id) d.*')\n\t\t\t\t)\n\t\t\t\t.from({d: 'delegation'})\n\t\t\t\t.leftJoin(this.knex.select(\n\t\t\t\t\t\tthis.knex.raw('distinct on (sd.addr_id) sd.tx_id'),\n\t\t\t\t\t\t'sd.addr_id'\n\t\t\t\t\t)\n\t\t\t\t\t.from({sd: 'stake_deregistration'})\n\t\t\t\t\t.orderByRaw('sd.addr_id, sd.tx_id desc')\n\t\t\t\t\t.as('sd'), pg => pg.on('sd.addr_id', 'd.addr_id')\n\t\t\t\t)\n\t\t\t\t.innerJoin({p: 'pool_hash'}, 'p.id', 'd.pool_hash_id')\n\t\t\t\t.whereRaw('sd.addr_id is NULL or sd.tx_id < d.tx_id')\n\t\t\t\t.orderByRaw('d.addr_id, d.tx_id desc')\n\t\t\t\t.as('d'), pg => pg.on('d.pool_hash_id', 'p.id')\n\t\t\t)\n\t\t\t.where('p.view', '=', poolId)\n\t\t)\n\t\t.select(\n\t\t\tthis.knex.raw('s.view as stake_address'),\n\t\t\tthis.knex.raw('r.rewards - w.withdrawals as available_rewards'),\n\t\t\tthis.knex.raw('s.stake + (r.rewards - w.withdrawals) as stake')\n\t\t)\n\t\t.from(this.knex.select(\n\t\t\t\tthis.knex.raw('MAX(d.addr_id) as id'),\n\t\t\t\tthis.knex.raw('COALESCE(SUM (r.amount), 0) as rewards'),\n\t\t\t)\n\t\t\t.from({d: 'delegations'})\n\t\t\t.leftJoin({r: 'reward'}, pg => pg.on('r.addr_id', 'd.addr_id').andOn(this.knex.raw('r.pool_id is not null')))\n\t\t\t.groupByRaw('d.addr_id')\n\t\t\t.as('r')\n\t\t)\n\t\t.innerJoin(this.knex.select(\n\t\t\t\tthis.knex.raw('MAX(d.addr_id) as id'),\n\t\t\t\tthis.knex.raw('COALESCE(SUM (w.amount), 0) as withdrawals')\n\t\t\t)\n\t\t\t.from({d: 'delegations'})\n\t\t\t.leftJoin(this.knex.select(\n\t\t\t\t\t'w.addr_id',\n\t\t\t\t\t'w.amount',\n\t\t\t\t\t'block.epoch_no'\n\t\t\t\t)\n\t\t\t\t.from({w: 'withdrawal'})\n\t\t\t\t.innerJoin('tx', 'tx.id', 'w.tx_id')\n\t\t\t\t.innerJoin('block', 'block.id', 'tx.block_id')\n\t\t\t\t.as('w'), pg => pg.on('w.addr_id', 'd.addr_id')\n\t\t\t)\n\t\t\t.groupByRaw('d.addr_id')\n\t\t\t.as('w'), pg => pg.on('w.id', 'r.id')\n\t\t)\n\t\t.innerJoin(this.knex.select(\n\t\t\t\tthis.knex.raw('MAX(d.addr_id) as id'),\n\t\t\t\tthis.knex.raw('MAX(sa.view) as view'),\n\t\t\t\tthis.knex.raw('COALESCE(SUM(uv.value), 0) as stake')\n\t\t\t)\n\t\t\t.from({d: 'delegations'})\n\t\t\t.innerJoin({sa: 'stake_address'}, 'sa.id', 'd.addr_id')\n\t\t\t.leftJoin({uv: 'utxo_view'}, 'uv.stake_address_id', 'd.addr_id')\n\t\t\t.groupBy('d.addr_id')\n\t\t\t.as('s'), pg => pg.on('s.id', 'r.id')\n\t\t);\n\t}\n\n\tasync getAsset(identifier: string): Promise<Asset> {\n\t\treturn this.knex.select(\n\t\t\tthis.knex.raw(`encode(asset.policy, 'hex') as policy_id`),\n\t\t\tthis.knex.raw(`encode(asset.name, 'hex') as asset_name`),\n\t\t\t'asset.fingerprint',\n\t\t\tthis.knex.raw(`SUM(ma_tx_mint.quantity) as quantity`),\n\t\t\tthis.knex.raw(`count(*) as mint_or_burn_count`),\n\t\t\tthis.knex.raw(`(select encode(tx.hash, 'hex') from tx inner join ma_tx_mint on tx.id = ma_tx_mint.tx_id inner join multi_asset as asset on asset.id = ma_tx_mint.ident where asset.policy = decode('${identifier.substring(0, 56)}', 'hex') AND asset.name = decode('${identifier.substring(56)}', 'hex') order by tx.id asc limit 1) as initial_mint_tx_hash`),\n\t\t\tthis.knex.raw(`(select tx_metadata.json || jsonb_build_object('key', tx_metadata.key) from tx_metadata inner join ma_tx_mint on tx_metadata.tx_id = ma_tx_mint.tx_id inner join multi_asset as asset on asset.id = ma_tx_mint.ident where asset.policy = decode('${identifier.substring(0, 56)}', 'hex') AND asset.name = decode('${identifier.substring(56)}', 'hex') limit 1) as on_chain_metadata`)\n\t\t)\n\t\t.from<Asset>('ma_tx_mint')\n\t\t.innerJoin({asset: 'multi_asset'}, 'asset.id', 'ma_tx_mint.ident')\n\t\t.whereRaw(`asset.policy = decode('${identifier.substring(0, 56)}', 'hex') AND asset.name = decode('${identifier.substring(56)}', 'hex')`)\n\t\t.groupBy('asset.policy', 'asset.name', 'asset.fingerprint')\n\t\t.then((rows: any[]) => {\n\t\t\tif (rows.length > 0) {\n\t\t\t\tconst {on_chain_metadata, ...asset}: Asset = rows[0];\n\t\t\t\t// let assetFingerprint  = new AssetFingerprint(\n\t\t\t\t// \tBuffer.from(asset.policy_id, 'hex'),\n\t\t\t\t// \tBuffer.from(asset.asset_name, 'hex')\n\t\t\t\t// );\n\t\t\t\t// asset.fingerprint = assetFingerprint.fingerprint();\n\t\t\t\tif (on_chain_metadata) {\n\t\t\t\t\tconst { key, ...json } = on_chain_metadata;\n\t\t\t\t\tasset.metadata = {label: key, json};\n\t\t\t\t} else {\n\t\t\t\t\tasset.metadata = null;\n\t\t\t\t}\n\t\t\t\treturn asset;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t})\n\t}\n\n\tasync getEpochParamters(epoch: number): Promise<EpochParameters> {\n\t\treturn this.knex.select(\n\t\t\t'epoch_no',\n\t\t\t'min_fee_a',\n\t\t\t'min_fee_b',\n\t\t\t'max_block_size',\n\t\t\t'max_tx_size',\n\t\t\t'max_bh_size as max_block_header_size',\n\t\t\t'key_deposit',\n\t\t\t'pool_deposit',\n\t\t\t'max_epoch',\n\t\t\t'optimal_pool_count',\n\t\t\t'influence as influence_a0',\n\t\t\t'monetary_expand_rate as monetary_expand_rate_rho',\n\t\t\t'treasury_growth_rate as treasury_growth_rate_tau',\n\t\t\t'decentralisation',\n\t\t\tthis.knex.raw(`encode(entropy, 'hex') as entropy`),\n\t\t\t'protocol_major',\n\t\t\t'protocol_minor',\n\t\t\t'min_utxo_value as min_utxo',\n\t\t\t'min_pool_cost',\n\t\t\tthis.knex.raw(`encode(nonce, 'hex') as nonce`),\n\t\t\t'block_id',\n\t\t)\n\t\t.from<EpochParameters>('epoch_param')\n\t\t.where('epoch_param.epoch_no', '=', epoch)\n\t\t.first();\n\t}\n\n\t// TODO: create the trigger function and trigger on DB based on `args`\n\tregisterEvent(event: string, args: any, callback: (msg: any) => void): void {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tlistenEvent(event: string, callback: (msg: any) => void): void {\n\t\tthis.knex.client.acquireRawConnection()\n\t\t.then((connection: any) => {\n\t\t\tconnection.query(`LISTEN ${event}`);\n\t\t\tconnection.on('notification', async (msg: {channel: string, payload: string}) => {\n\t\t\t\tconst payloadJson = JSON.parse(msg.payload);\n\t\t\t\tcallback({ ...msg, payload: payloadJson});\n\t\t\t});\n\t\t});\n\t}\n\n}","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/address.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/asset.ts",["100"],"import { Metadata } from \"./metadata\";\n\nexport interface Asset {\n\tquantity: number;\n\tpolicy_id: string;\n\tasset_name: string;\n\tmint_or_burn_count?: number;\n\tinitial_mint_tx_hash?: string;\n\ton_chain_metadata?: any;\n\tfingerprint?: string;\n\tmetadata?: Metadata;\n}","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/block.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/delegation.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/epoch-paramenters.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/epoch.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/metadata.ts",["101"],"export interface Metadata {\n\tlabel: string;\n\tjson: any;\n}","/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/pool-delegation.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/pool.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/stake.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/transaction.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/models/utxo.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/utils/index.ts",[],"/Users/leo/Documents/personal/tangocrypto/tango-ledger/src/utils/migrate.ts",[],{"ruleId":"102","severity":1,"message":"103","line":10,"column":16,"nodeType":"104","messageId":"105","endLine":10,"endColumn":19,"suggestions":"106"},{"ruleId":"102","severity":1,"message":"103","line":11,"column":16,"nodeType":"104","messageId":"105","endLine":11,"endColumn":19,"suggestions":"107"},{"ruleId":"102","severity":1,"message":"103","line":12,"column":21,"nodeType":"104","messageId":"105","endLine":12,"endColumn":24,"suggestions":"108"},{"ruleId":"102","severity":1,"message":"103","line":13,"column":22,"nodeType":"104","messageId":"105","endLine":13,"endColumn":25,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"103","line":30,"column":29,"nodeType":"104","messageId":"105","endLine":30,"endColumn":32,"suggestions":"110"},{"ruleId":"102","severity":1,"message":"103","line":35,"column":29,"nodeType":"104","messageId":"105","endLine":35,"endColumn":32,"suggestions":"111"},{"ruleId":"102","severity":1,"message":"103","line":40,"column":34,"nodeType":"104","messageId":"105","endLine":40,"endColumn":37,"suggestions":"112"},{"ruleId":"102","severity":1,"message":"103","line":45,"column":35,"nodeType":"104","messageId":"105","endLine":45,"endColumn":38,"suggestions":"113"},{"ruleId":"102","severity":1,"message":"103","line":30,"column":37,"nodeType":"104","messageId":"105","endLine":30,"endColumn":40,"suggestions":"114"},{"ruleId":"102","severity":1,"message":"103","line":30,"column":58,"nodeType":"104","messageId":"105","endLine":30,"endColumn":61,"suggestions":"115"},{"ruleId":"102","severity":1,"message":"103","line":31,"column":45,"nodeType":"104","messageId":"105","endLine":31,"endColumn":48,"suggestions":"116"},{"ruleId":"102","severity":1,"message":"103","line":409,"column":23,"nodeType":"104","messageId":"105","endLine":409,"endColumn":26,"suggestions":"117"},{"ruleId":"102","severity":1,"message":"103","line":417,"column":40,"nodeType":"104","messageId":"105","endLine":417,"endColumn":43,"suggestions":"118"},{"ruleId":"102","severity":1,"message":"103","line":655,"column":16,"nodeType":"104","messageId":"105","endLine":655,"endColumn":19,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":706,"column":16,"nodeType":"122","messageId":"123","endLine":706,"endColumn":29},{"ruleId":"120","severity":1,"message":"124","line":706,"column":31,"nodeType":"122","messageId":"123","endLine":706,"endColumn":40},{"ruleId":"102","severity":1,"message":"103","line":706,"column":37,"nodeType":"104","messageId":"105","endLine":706,"endColumn":40,"suggestions":"125"},{"ruleId":"120","severity":1,"message":"126","line":706,"column":42,"nodeType":"122","messageId":"123","endLine":706,"endColumn":70},{"ruleId":"102","severity":1,"message":"103","line":706,"column":58,"nodeType":"104","messageId":"105","endLine":706,"endColumn":61,"suggestions":"127"},{"ruleId":"102","severity":1,"message":"103","line":710,"column":45,"nodeType":"104","messageId":"105","endLine":710,"endColumn":48,"suggestions":"128"},{"ruleId":"102","severity":1,"message":"103","line":712,"column":22,"nodeType":"104","messageId":"105","endLine":712,"endColumn":25,"suggestions":"129"},{"ruleId":"102","severity":1,"message":"103","line":9,"column":22,"nodeType":"104","messageId":"105","endLine":9,"endColumn":25,"suggestions":"130"},{"ruleId":"102","severity":1,"message":"103","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":11,"suggestions":"131"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["132","133"],["134","135"],["136","137"],["138","139"],["140","141"],["142","143"],["144","145"],["146","147"],["148","149"],["150","151"],["152","153"],["154","155"],["156","157"],["158","159"],"@typescript-eslint/no-unused-vars","'event' is defined but never used.","Identifier","unusedVar","'args' is defined but never used.",["160","161"],"'callback' is defined but never used.",["162","163"],["164","165"],["166","167"],["168","169"],["170","171"],{"messageId":"172","fix":"173","desc":"174"},{"messageId":"175","fix":"176","desc":"177"},{"messageId":"172","fix":"178","desc":"174"},{"messageId":"175","fix":"179","desc":"177"},{"messageId":"172","fix":"180","desc":"174"},{"messageId":"175","fix":"181","desc":"177"},{"messageId":"172","fix":"182","desc":"174"},{"messageId":"175","fix":"183","desc":"177"},{"messageId":"172","fix":"184","desc":"174"},{"messageId":"175","fix":"185","desc":"177"},{"messageId":"172","fix":"186","desc":"174"},{"messageId":"175","fix":"187","desc":"177"},{"messageId":"172","fix":"188","desc":"174"},{"messageId":"175","fix":"189","desc":"177"},{"messageId":"172","fix":"190","desc":"174"},{"messageId":"175","fix":"191","desc":"177"},{"messageId":"172","fix":"192","desc":"174"},{"messageId":"175","fix":"193","desc":"177"},{"messageId":"172","fix":"194","desc":"174"},{"messageId":"175","fix":"195","desc":"177"},{"messageId":"172","fix":"196","desc":"174"},{"messageId":"175","fix":"197","desc":"177"},{"messageId":"172","fix":"198","desc":"174"},{"messageId":"175","fix":"199","desc":"177"},{"messageId":"172","fix":"200","desc":"174"},{"messageId":"175","fix":"201","desc":"177"},{"messageId":"172","fix":"202","desc":"174"},{"messageId":"175","fix":"203","desc":"177"},{"messageId":"172","fix":"204","desc":"174"},{"messageId":"175","fix":"205","desc":"177"},{"messageId":"172","fix":"206","desc":"174"},{"messageId":"175","fix":"207","desc":"177"},{"messageId":"172","fix":"208","desc":"174"},{"messageId":"175","fix":"209","desc":"177"},{"messageId":"172","fix":"210","desc":"174"},{"messageId":"175","fix":"211","desc":"177"},{"messageId":"172","fix":"212","desc":"174"},{"messageId":"175","fix":"213","desc":"177"},{"messageId":"172","fix":"214","desc":"174"},{"messageId":"175","fix":"215","desc":"177"},"suggestUnknown",{"range":"216","text":"217"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"216","text":"218"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"219","text":"217"},{"range":"219","text":"218"},{"range":"220","text":"217"},{"range":"220","text":"218"},{"range":"221","text":"217"},{"range":"221","text":"218"},{"range":"222","text":"217"},{"range":"222","text":"218"},{"range":"223","text":"217"},{"range":"223","text":"218"},{"range":"224","text":"217"},{"range":"224","text":"218"},{"range":"225","text":"217"},{"range":"225","text":"218"},{"range":"226","text":"217"},{"range":"226","text":"218"},{"range":"227","text":"217"},{"range":"227","text":"218"},{"range":"228","text":"217"},{"range":"228","text":"218"},{"range":"229","text":"217"},{"range":"229","text":"218"},{"range":"230","text":"217"},{"range":"230","text":"218"},{"range":"231","text":"217"},{"range":"231","text":"218"},{"range":"232","text":"217"},{"range":"232","text":"218"},{"range":"233","text":"217"},{"range":"233","text":"218"},{"range":"234","text":"217"},{"range":"234","text":"218"},{"range":"235","text":"217"},{"range":"235","text":"218"},{"range":"236","text":"217"},{"range":"236","text":"218"},{"range":"237","text":"217"},{"range":"237","text":"218"},[358,361],"unknown","never",[378,381],[403,406],[429,432],[1018,1021],[1129,1132],[1245,1248],[1382,1385],[1495,1498],[1516,1519],[1664,1667],[13508,13511],[13697,13700],[23200,23203],[24632,24635],[24653,24656],[24769,24772],[24854,24857],[208,211],[51,54]]